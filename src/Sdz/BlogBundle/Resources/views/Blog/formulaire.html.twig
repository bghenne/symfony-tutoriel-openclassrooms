{# src/Sdz/BlogBundle/Resources/views/Blog/formulaire.html.twig #}

{# Cette vue n'hérite de personne, elle sera incluse par d'autres vues qui, elles, hériteront probablement du layout. #}
{# Je dis « probablement » car, ici pour cette vue, on n'en sait rien et c'est une info qui ne nous concerne pas. #}

<h3>Formulaire d'article</h3>

{% if (action is defined) %}
    {% set action = path(action, {'id' : id}) %}
{% else %}
    {% set action = path("sdzblog_ajouter") %}
{%  endif %}

{# Ici on laisse vide la vue pour l'instant, on la comblera plus tard lorsqu'on saura afficher un formulaire. #}
<div class="well">
    <form method="post" {{ form_enctype(form) }} action="{{ action }}">
        {{ form_widget(form) }}
        <input type="submit" class="btn btn-primary" />
    </form>
</div>

{# On charge la bibliothèque jQuery. Ici, je la prends depuis le site jquery.com,
   mais si vous l'avez en local, changez simplement l'adresse. #}
<script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>

{# Voici le script en question : #}
<script type="text/javascript">
    $(document).ready(function() {

        // On récupère la balise <div> en question qui contient l'attribut « data-prototype » qui nous intéresse.
        var $containerCommentaires = $('div#sdz_blogbundle_article_commentaires');

        // On ajoute un lien pour ajouter une nouvelle catégorie
        var $lienAjoutCommentaire = $('<a href="#" id="ajout_commentaires" class="btn">Ajouter un commentaire</a>');
        $containerCommentaires.append($lienAjoutCommentaire);

        // On ajoute un nouveau champ à chaque clic sur le lien d'ajout.
        $lienAjoutCommentaire.click(function(e) {
            ajouterCommentaire($containerCommentaires);
            e.preventDefault(); // évite qu'un # apparaisse dans l'URL
            return false;
        });

        // On définit un compteur unique pour nommer les champs qu'on va ajouter dynamiquement
        var index = $containerCommentaires.find(':input').length;

        // On ajoute un premier champ directement s'il n'en existe pas déjà un (cas d'un nouvel article par exemple).
        if (index == 0) {
            ajouterCommentaire($containerCommentaires);
        } else {
            // Pour chaque catégorie déjà existante, on ajoute un lien de suppression
            $container.children('div').each(function() {
                ajouterLienSuppressionCommentaire($(this));
            });
        }

        // La fonction qui ajoute un formulaire Categorie
        function ajouterCommentaire($container) {
            // Dans le contenu de l'attribut « data-prototype », on remplace :
            // - le texte "__name__label__" qu'il contient par le label du champ
            // - le texte "__name__" qu'il contient par le numéro du champ
            var $prototype = $($containerCommentaires.attr('data-prototype').replace(/__name__label__/g, 'Commentaire n°' + (index+1))
                    .replace(/__name__/g, index));

            // On ajoute au prototype un lien pour pouvoir supprimer la catégorie
            ajouterLienSuppressionCommentaire($prototype);

            // On ajoute le prototype modifié à la fin de la balise <div>
            $container.append($prototype);

            // Enfin, on incrémente le compteur pour que le prochain ajout se fasse avec un autre numéro
            index++;
        }

        // La fonction qui ajoute un lien de suppression d'une catégorie
        function ajouterLienSuppressionCommentaire($prototype) {
            // Création du lien
            $lienSuppression = $('<a href="#" class="btn btn-danger">Supprimer</a>');

            // Ajout du lien
            $prototype.append($lienSuppression);

            // Ajout du listener sur le clic du lien
            $lienSuppression.click(function(e) {
                $prototype.remove();
                e.preventDefault(); // évite qu'un # apparaisse dans l'URL
                return false;
            });
        }


    });
</script>